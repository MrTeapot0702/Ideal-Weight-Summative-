/* This is the Summative assignment for Computer Science.
 * The title is Ideal Weight Program.
 */

package IdealWeight;

/**
 *
 * @author Paul Lee
 */
public class IdealWeight extends javax.swing.JFrame {

    /**
     * Creates new form IdealWeight
     */
    public IdealWeight() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        measurementLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        inputName = new javax.swing.JTextField();
        inputHeight = new javax.swing.JTextField();
        calculateButton = new javax.swing.JButton();
        finalResult = new javax.swing.JLabel();
        metricOrImperial = new javax.swing.JLabel();
        metresOrInches = new javax.swing.JLabel();
        metricCheckBox = new javax.swing.JCheckBox();
        imperialCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 255, 0));

        titleLabel.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(0, 153, 153));
        titleLabel.setText("Ideal Weight Calculator");

        nameLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(0, 153, 153));
        nameLabel.setText("Name :");

        measurementLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        measurementLabel.setForeground(new java.awt.Color(0, 153, 153));
        measurementLabel.setText("System Of Measure :");

        heightLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        heightLabel.setForeground(new java.awt.Color(0, 153, 153));
        heightLabel.setText("Height :");

        inputHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputHeightActionPerformed(evt);
            }
        });

        calculateButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        calculateButton.setForeground(new java.awt.Color(0, 153, 153));
        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        finalResult.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        finalResult.setForeground(new java.awt.Color(0, 153, 153));

        metricOrImperial.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        metricOrImperial.setForeground(new java.awt.Color(0, 153, 153));
        metricOrImperial.setText("Metric Or Imperial");

        metresOrInches.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        metresOrInches.setForeground(new java.awt.Color(0, 153, 153));
        metresOrInches.setText("Metric = Metres / Imperial = Inches");

        metricCheckBox.setBackground(new java.awt.Color(102, 255, 0));
        metricCheckBox.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        metricCheckBox.setForeground(new java.awt.Color(0, 153, 153));
        metricCheckBox.setText("Metric");
        metricCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricCheckBoxActionPerformed(evt);
            }
        });

        imperialCheckBox.setBackground(new java.awt.Color(102, 255, 0));
        imperialCheckBox.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        imperialCheckBox.setForeground(new java.awt.Color(0, 153, 153));
        imperialCheckBox.setText("Imperial");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(heightLabel)
                            .addComponent(measurementLabel)
                            .addComponent(nameLabel))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inputHeight, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(inputName)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addComponent(metricCheckBox)
                                .addGap(0, 10, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(calculateButton)
                            .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(finalResult, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(metresOrInches)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(metricOrImperial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(imperialCheckBox)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(measurementLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(metricCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(metricOrImperial)
                    .addComponent(imperialCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heightLabel)
                    .addComponent(inputHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metresOrInches)
                .addGap(16, 16, 16)
                .addComponent(calculateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(finalResult, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputHeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputHeightActionPerformed

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
    
    //This is to declare the variables and convert each of these variables to 
    //a String or a Double value.
        
    String yourName;
    String metric;
    String imperial;
    double weightKg;
    double weightPounds;
    double heightInches;
    double heightMetres;
    
    //This is the step to give each variable a value from the design section.
            
    yourName = inputName.getText();
    metric = metricCheckBox.getText();
    imperial = imperialCheckBox.getText();
    heightInches = Double.parseDouble(inputHeight.getText());
    heightMetres = Double.parseDouble(inputHeight.getText());
    
    //The if else statement because it is the most reliable.
    
    if(metricCheckBox.isSelected())
    {
        weightKg = heightMetres * heightMetres * 25;
        weightKg = Math.round(weightKg * 100.00)/100.00;
        finalResult.setText(yourName + " Your ideal weight is " + weightKg + " Kilograms. ");    
    }
    else
    {
        weightPounds = heightInches * heightInches * 25 / 703;
        weightPounds = Math.round(weightPounds * 100.00)/100.00;
        finalResult.setText(yourName + " Your ideal weight is " + weightPounds + " Pounds. ");
    }
    
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void metricCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metricCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IdealWeight().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton calculateButton;
    private javax.swing.JLabel finalResult;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JCheckBox imperialCheckBox;
    private javax.swing.JTextField inputHeight;
    private javax.swing.JTextField inputName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel measurementLabel;
    private javax.swing.JLabel metresOrInches;
    private javax.swing.JCheckBox metricCheckBox;
    private javax.swing.JLabel metricOrImperial;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    private double inputHeight() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private String inputName() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private String inputMeasure() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private double finalAnswer() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
